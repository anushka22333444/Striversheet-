
class Solution {
    
    // Function to count the total number of set bits from 1 to n
    static int countSetBits(int n) {
        int count = 0; // This will store the total set bits count
        int i = 0;
        
        // Loop through each bit position
        while ((1 << i) <= n) {
            // Find the total numbers that are divisible by 2^(i+1)
            int totalPairs = n / (1 << (i + 1));
            
            // For each complete pair, there are 2^i set bits in that range
            count += totalPairs * (1 << i);
            
            // Find the remainder (left over) part which is less than 2^(i+1)
            int remainder = n % (1 << (i + 1));
            
            // Add the set bits in the remainder part
            if (remainder >= (1 << i)) {
                count += remainder - (1 << i) + 1;
            }
            
            i++; // Move to the next bit position
        }
        
        return count;
    }
}
